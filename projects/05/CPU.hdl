/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Decode Beginning
    // Evaluvate inc and load for PC
    Not(in=ng, out=nng);
    Not(in=zr, out=nzr);
    And(a=nng, b=nzr, out=ps);

    And(a=instruction[0], b=ps, out=jgt);
    And(a=instruction[1], b=zr, out=jeq);
    And(a=instruction[2], b=ng, out=jlt);
    // And3Way(a=instruction[0], b=instruction[1], c=instruction[2], out=nc);
    And(a=instruction[0], b=instruction[1], out=ucTmp);
    And(a=ucTmp, b=instruction[2], out=uc);
    Or(a=jgt, b=jeq, out=jc1);
    Or(a=jlt, b=uc, out=jc2);
    Or(a=jc1, b=jc2, out=jc3);
    And(a=instruction[15], b=jc3, out=jmp);
    Not(in=jmp, out=inc);

    // Evaluvate load controls for registers 
    Not(in=instruction[15], out=aInstruction);
    And(a=instruction[15], b=instruction[5], out=instOrOut);
    Or(a=instOrOut, b=aInstruction, out=loadA);
    And(a=instruction[15], b=instruction[4], out=dLoad);
    // Decode Ending

    // Core circuit
    Mux16(a=instruction, b=outMTmp, sel=instOrOut, out=aIn);
    ARegister(in=aIn, load=loadA, out=aOut);
    Mux16(a=aOut, b=inM, sel=instruction[12], out=mOra);
    DRegister(in=outMTmp, load=dLoad, out=dOut);
    ALU(x=dOut, y=mOra, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outMTmp, ng=ng, zr=zr);
    PC(in=aOut, load=jmp, inc=inc, reset=reset, out[0..14]=pc);

    // Output
    And16(a[0..15]=true, b=outMTmp, out=outM);
    And16(a[0..15]=true, b=aOut, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[3], out=writeM);

}